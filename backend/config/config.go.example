package config

import (
	"fmt"
	"os"
)

type Config struct {
	// 数据库相关
	DBUser     string
	DBPassword string
	DBHost     string
	DBPort     string
	DBName     string

	// OpenAI相关
	OpenAIAPIKey         string
	OpenAIAPIUrl         string
	OpenAIModel          string // For chat completions
	OpenAIEmbeddingModel string // For embeddings
	// 新增：默认系统提示词
	GenericSystemPrompt       string
	KnowledgeBaseSystemPrompt string

	// 服务端口
	ServerPort string
}

// NewConfig 从环境变量或默认值初始化配置
func NewConfig() *Config {
	cfg := &Config{
		// 从环境变量中读取，如果不存在则使用默认值
		DBUser:               getEnv("DB_USER", "root"),
		DBPassword:           getEnv("DB_PASSWORD", "YOUR_DBPASSWORD"),
		DBHost:               getEnv("DB_HOST", "YOUR_HOSTIP"),
		DBPort:               getEnv("DB_PORT", "3306"),
		DBName:               getEnv("DB_NAME", "DB_NAME"),
		OpenAIAPIKey:         getEnv("OPENAI_API_KEYs", "YOUR-APIKEY"),
		OpenAIAPIUrl:         getEnv("OPENAI_API_URL", "https://api.openai.com/v1/chat/completions"), // Keep this for chat if needed
		OpenAIModel:          getEnv("OPENAI_MODEL", "chatgpt-4o-latest"),                            // Changed default model to gpt-4o
		OpenAIEmbeddingModel: getEnv("OPENAI_EMBEDDING_MODEL", "text-embedding-3-small"),             // Added embedding model, using a recommended default
		// 添加默认提示词加载
		GenericSystemPrompt:       getEnv("GENERIC_SYSTEM_PROMPT", "You are a bilingual presentation assistant AI. Provide responses in markdown format to help Chinese speakers deliver English presentations. Always structure your response in two main sections: 1. Chinese Understanding: Provide core message, key terms (both Chinese and English), and key points for the speaker's understanding. 2. English Delivery: Give a quick answer, key speaking points, one clear example (marked as real or hypothetical), and useful phrases. Use headings (#), bold (**), and bullet points (*) in markdown format. Keep responses concise, use simple English, and clearly distinguish between real and hypothetical examples. Your goal is to help speakers understand the content in Chinese while preparing them to deliver confidently in English."),
		KnowledgeBaseSystemPrompt: getEnv("KB_SYSTEM_PROMPT", "你是一个问答助手。请根据下面提供的相关信息来回答用户的问题。\n如果信息足够，请直接回答问题。如果信息不足或不相关，请说明无法根据提供的信息回答。\n请保持回答简洁明了。\n\n相关信息:\n---\n%s\n---\n"), // 注意保留 %s 用于插入上下文
		ServerPort:                getEnv("SERVER_PORT", ":8080"),
	}
	// 打印加载的配置（调试用，生产环境可移除）
	// fmt.Printf("Config loaded: %+v\n", cfg) // 暂时注释掉，避免打印过长提示词
	return cfg
}

// GetDBDSN 返回用于sql.Open的数据库连接DSN
func (c *Config) GetDBDSN() string {
	return fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?parseTime=true",
		c.DBUser, c.DBPassword, c.DBHost, c.DBPort, c.DBName)
}

// 辅助函数：若环境变量不存在则使用默认值
func getEnv(key, defaultVal string) string {
	if val, ok := os.LookupEnv(key); ok {
		return val
	}
	return defaultVal
}
